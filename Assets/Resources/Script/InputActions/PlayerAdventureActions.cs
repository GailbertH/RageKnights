//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Resources/Script/InputActions/PlayerAdventureActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAdventureActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAdventureActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAdventureActions"",
    ""maps"": [
        {
            ""name"": ""Adventure_Map"",
            ""id"": ""57749697-a7b3-482c-ab39-c21c10592810"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""5981b5b7-24f9-483b-9b84-cda7038868bf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""bd2b7f52-ddb6-4b96-81c7-8605add20da3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""42ccf34d-4d49-47ae-b8ab-4e1a4ff1786f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d7291536-3318-416b-aa1e-69f4f7d39be7"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a179be1d-bbc7-4cb6-9a1f-1173b5f1f6af"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e864f254-8d5c-492c-a620-b3973056034e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Adventure_Map
        m_Adventure_Map = asset.FindActionMap("Adventure_Map", throwIfNotFound: true);
        m_Adventure_Map_Movement = m_Adventure_Map.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Adventure_Map
    private readonly InputActionMap m_Adventure_Map;
    private List<IAdventure_MapActions> m_Adventure_MapActionsCallbackInterfaces = new List<IAdventure_MapActions>();
    private readonly InputAction m_Adventure_Map_Movement;
    public struct Adventure_MapActions
    {
        private @PlayerAdventureActions m_Wrapper;
        public Adventure_MapActions(@PlayerAdventureActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Adventure_Map_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Adventure_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Adventure_MapActions set) { return set.Get(); }
        public void AddCallbacks(IAdventure_MapActions instance)
        {
            if (instance == null || m_Wrapper.m_Adventure_MapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Adventure_MapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IAdventure_MapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IAdventure_MapActions instance)
        {
            if (m_Wrapper.m_Adventure_MapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAdventure_MapActions instance)
        {
            foreach (var item in m_Wrapper.m_Adventure_MapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Adventure_MapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Adventure_MapActions @Adventure_Map => new Adventure_MapActions(this);
    public interface IAdventure_MapActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
